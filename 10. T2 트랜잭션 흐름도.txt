[클라이언트]
   │  결제 요청
   ▼
[외부 PG]
   │  결제 성공 웹훅/콜백
   ▼
[앱서버 - T2 트랜잭션 시작 (/confirm)]
   │
   ├─ ① 멱등성 체크
   │      - 같은 결제건 중복 처리 방지
   │
   ├─ ② HOLD 행 FOR UPDATE + 만료/상태 확인
   │      - 예약 재고가 아직 유효한지 확인
   │      - 동시에 다른 요청이 같은 재고 확정 못하게 락
   │
   ├─ ③ 주문/주문항목 생성 + HOLD=COMMITTED
   │      - 주문과 재고 확정 상태를 함께 기록
   │
   ├─ ④ 원장 + 아웃박스 기록
   │      - 주문 확정 이벤트를 안전하게 저장
   │
   └─ ⑤ 커밋 → order_id 응답
          - 커밋된 주문번호만 고객에게 반환
          - 아웃박스는 후속 시스템(배송, 알림, 정산)으로 퍼블리시




트랜잭션 2(T2) 전체 과정

(결제 성공 신호를 받았을 때 /confirm API 안에서 하는 일)

[1] 멱등성 체크
    - 같은 결제 건(PG 거래ID)이 이미 처리된 적이 있는지 확인.
    - 있으면: 저장된 결과 그대로 반환하고 종료.
    - 없으면: "이 결제는 내가 처리하겠다" 표시(멱등성 테이블 insert).

[2] HOLD 유효성 확인 (SELECT ... FOR UPDATE)
    - 내가 예약한 재고(HOLD)가 아직 살아 있는지 확인.
    - 만료시간 지났거나 이미 다른 요청이 확정했으면 종료.
    - FOR UPDATE로 락을 걸어 다른 트랜잭션이 동시에 확정 못 하게 함.

[3] 주문 생성
    - orders 테이블에 주문 데이터 insert.
    - order_items 테이블에 품목 insert.

[4] HOLD 확정
    - reservation_hold 테이블의 status를 'COMMITTED'로 변경.
    - 주문 생성과 이 변경을 **같은 트랜잭션**에서 실행.

[5] 원장/아웃박스 기록
    - 주문 확정 사실을 원장 테이블에 기록(불변 기록).
    - 아웃박스 테이블에 주문확정 이벤트 기록(후속 시스템 전달용).

[6] 커밋
    - 위 [2]~[5]까지의 모든 변경 사항을 한 번에 확정.
    - 커밋이 끝난 시점에서만 order_id를 응답.

[7] 후속 처리
    - 아웃박스의 이벤트를 별도 프로세스가 읽어서 배송, 알림, 정산 시스템으로 전송.

한 줄 비유

마트 계산대에서
① 같은 영수증으로 계산한 적 없는지 확인(멱등성) →
② 내가 잡아둔 물건이 아직 내 건지 확인(HOLD 유효성) →
③ 결제 처리(주문 생성) +
④ 물건을 내 것으로 표시(HOLD 확정) →
⑤ 영수증 원본/사본 저장(원장·아웃박스) →
⑥ 계산 완료(커밋) →
⑦ 배달팀·정산팀에 통보.